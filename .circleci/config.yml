version: 2.1
executors:
  python-alpine:
    docker:
      - image: python:3.10.5-alpine3.16
  node-18:
    docker:
      - image: cimg/node:18.4.0
  node-13:
    docker:
      - image: circleci/node:13.8.0
  aws:
    docker:
      - image: amazon/aws-cli
orbs: 
  slack: circleci/slack@4.10.1
commands:
  configure-aws:
    parameters:
      event:
        type: enum
        enum: [always, on_fail]
        default: always
    steps:
      - run:
          name: configure aws
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
          when: "<< parameters.event >>"
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      frontend-stack-name:
        type: string
        default: frontend-${CIRCLE_WORKFLOW_ID:0:5} 
      backend-stack-name:
        type: string
        default: backend-${CIRCLE_WORKFLOW_ID:0:5} 
      bucket-name:
        type: string
        default: udapeople-${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # empty the frontend bucket
            aws s3 rm s3://<< parameters.bucket-name >> --recursive
            aws cloudformation delete-stack --stack-name << parameters.frontend-stack-name >>
            aws cloudformation delete-stack --stack-name << parameters.backend-stack-name >>

  print-cloudformation-events:
    parameters:
      stack-name:
        type: string
    description: prints the cloudforation events for debuggig failed cloudformation commands
    steps:
      - run:  
          command: |
            aws cloudformation describe-stack-events \
            --stack-name << parameters.stack-name >>
          name: cloudformation stack debug 
          when: on_fail
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/P8Xcc73g9yAfoYt7Cqb7Qs/migration_${CIRCLE_WORKFLOW_ID:0:5})
            if [ $SUCCESS == "1" ]
            then
              echo "reverting migration"
              cd backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail

# use yaml syntax to reduce redundancy when defining context 
default-context: &default-context
  context:
    - udacity-project-3

jobs:
  build-frontend:
    executor: node-13
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  build-backend:
    executor: node-18
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  test-frontend:
      executor: node-13
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: test 
            command: |
              cd backend
              npm install
              npm run test 
        - slack/notify:
            channel: $SLACK_DEFAULT_CHANNEL
            event: fail
            template: basic_fail_1
                
  test-backend:
    executor: node-18
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
  
  scan-frontend:
    executor: node-13
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  scan-backend:
    executor: node-13
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: install dependencies
          command: yum install tar gzip curl -y
      - configure-aws
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --tags project=udaproject3 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 
      - print-cloudformation-events:
          stack-name: "backend-${CIRCLE_WORKFLOW_ID:0:5}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --tags project=udacityproject3 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"
      - print-cloudformation-events:
          stack-name: "frontend-${CIRCLE_WORKFLOW_ID:0:5}"
      - run:
          name: Add backend ip to ansible inventory
          command: |
            mkdir -p /tmp/workspace
            cd .circleci/ansible
            echo [all] > /tmp/workspace/inventory
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> /tmp/workspace/inventory
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - inventory
      - destroy-environment  
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  configure-infrastructure:
    executor: python-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "73:8a:d8:78:69:9c:49:a9:58:88:66:3c:d6:4b:08:ce"
      - run:
          name: Install dependencies
          command: |
            apk update && apk add --no-cache curl jq gzip tar ansible aws-cli
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ls
            cat /tmp/workspace/inventory
            ansible-playbook -i /tmp/workspace/inventory configure-server.yml
      - configure-aws:
          event: "on_fail"
      - destroy-environment
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1 
       
  run-migrations:
    executor: node-13
    steps:
      - checkout
      - run: 
          name: install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully" backend/migrations_dump.txt
            then
              echo "persisting to kvdb"
              curl -k https://kvdb.io/P8Xcc73g9yAfoYt7Cqb7Qs/migration_${CIRCLE_WORKFLOW_ID:0:5}  -d '1'
            fi
      - revert-migrations
      - configure-aws:
          event: "on_fail"
      - destroy-environment
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  deploy-frontend:
    executor: aws
    steps:
      - checkout
      - configure-aws
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
            curl https://rpm.nodesource.com/setup_13.x | bash -
            yum install nodejs -y
            node --version
            npm --version
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:5}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
      - destroy-environment
      - revert-migrations
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1 
                              
  deploy-backend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints: 
            - "73:8a:d8:78:69:9c:49:a9:58:88:66:3c:d6:4b:08:ce"
      - run:
          name: install dependencies
          command: |
            # install aws cli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version

            # install ansible
            sudo apt update && sudo apt upgrade --assume-yes
            sudo apt install software-properties-common -y
            sudo apt-add-repository ppa:ansible/ansible -y
            sudo apt update 
            sudo apt install ansible
            ansible --version   

            # install node 13
            curl https://deb.nodesource.com/setup_13.x | sudo bash -
            sudo apt install nodejs -y
            node --version
            npm --version 
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mv artifact.tar.gz /tmp
      - configure-aws:
          event: "on_fail"
      - destroy-environment
      - revert-migrations
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1 
      - run:
          name: run ansible playbook
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory file is -------"
            cat /tmp/workspace/inventory 
            ansible-playbook -i /tmp/workspace/inventory deploy-backend.yml
      - configure-aws:
          event: "on_fail"
      - destroy-environment
      - revert-migrations
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1    

  smoke-test:
    executor: node-13
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # install aws cli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - run:
          name: Get backend url
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text  > backend_ip.txt
            cat backend_ip.txt
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(cat backend_ip.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            curl ${API_URL}
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # - configure-aws:
          # event: "on_fail"
      # - destroy-environment
      - revert-migrations
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1  


workflows:
  my_workflow:
    jobs:
      - build-frontend:
          <<: *default-context
      - build-backend:
          <<: *default-context
      - test-frontend:
          <<: *default-context
          requires: [build-frontend]
      - test-backend:
          <<: *default-context
          requires: [build-backend]
      - scan-frontend:
          <<: *default-context
          requires: [build-frontend]
      - scan-backend:
          <<: *default-context
          requires: [build-backend]
      - deploy-infrastructure:
         <<: *default-context
         requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          <<: *default-context
          requires: [deploy-infrastructure] 
      - run-migrations:
          <<: *default-context
          requires: [configure-infrastructure]
      - deploy-frontend:
          <<: *default-context
          requires: [run-migrations]
      - deploy-backend:
          <<: *default-context
          requires: [run-migrations]
      - smoke-test:
          <<: *default-context
          requires: [deploy-frontend, deploy-backend]
      
    
     