version: 2.1
executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  aws:
    docker:
      - image: amazon/aws-cli
orbs: 
  slack: circleci/slack@4.10.1
commands:
  configure-aws:
    parameters:
      event:
        type: enum
        enum: [always, on_fail]
        default: always
    steps:
      - run:
          name: configure aws
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
          when: "<< parameters.event >>"
    
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      frontend-stack-name:
        type: string
        default: frontend-${CIRCLE_WORKFLOW_ID:0:5} 
      backend-stack-name:
        type: string
        default: backend-${CIRCLE_WORKFLOW_ID:0:5} 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.frontend-stack-name >>
            aws cloudformation delete-stack --stack-name << parameters.backend-stack-name >>

  print-cloudformation-events:
    parameters:
      stack-name:
        type: string
    description: prints the cloudforation events for debuggig failed cloudformation commands
    steps:
      - run:  
          command: |
            aws cloudformation describe-stack-events \
            --stack-name << parameters.stack-name >>
          name: cloudformation stack debug 
          when: on_fail

# use yaml syntax to reduce redundancy when defining context 
default-context: &default-context
  context:
    - udacity-project-3

jobs:
  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  test-frontend:
      executor: node
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: test 
            command: |
              cd backend
              npm install
              npm run test 
        - slack/notify:
            channel: $SLACK_DEFAULT_CHANNEL
            event: fail
            template: basic_fail_1
                
  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
  
  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: install dependencies
          command: yum install tar gzip curl -y
      - configure-aws
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --tags project=udaproject3 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 
      - print-cloudformation-events:
          stack-name: "backend-${CIRCLE_WORKFLOW_ID:0:5}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --tags project=udacityproject3 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"
      - print-cloudformation-events:
          stack-name: "frontend-${CIRCLE_WORKFLOW_ID:0:5}"
      - run:
          name: Add backend ip to ansible inventory
          command: |
            cd .circleci/ansible
            echo [all] > inventory
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory
      - destroy-environment  
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  configure-infrastructure:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "73:8a:d8:78:69:9c:49:a9:58:88:66:3c:d6:4b:08:ce"
      - run:
          name: Install dependencies
          command: |
            apk update && apk add --no-cache curl jq gzip tar ansible aws-cli
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ls
            cat inventory
            ansible-playbook -i inventory configure-server.yml
      - configure-aws:
          event: "on_fail"
      - destroy-environment
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1 
       
  run-migrations:
    executor: node
    steps:
      - checkout
      - run: 
          name: install dependencies
          command: |
            sudo apt install curl  unzip -y
            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip awscliv2.zip
            # sudo ./aws/install
            # aws --version
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run: cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/P8Xcc73g9yAfoYt7Cqb7Qs/migration_${CIRCLE_WORKFLOW_ID:0:5}  -d '1'
            fi
      # - configure-aws:
      #     event: "on_fail"
      # - destroy-environment
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

workflows:
  my_workflow:
    jobs:
      # - build-frontend:
      #     <<: *default-context
      # - build-backend:
      #     <<: *default-context
      # - test-frontend:
      #     <<: *default-context
      #     requires: [build-frontend]
      # - test-backend:
      #     <<: *default-context
      #     requires: [build-backend]
      # - scan-frontend:
      #     <<: *default-context
      #     requires: [build-frontend]
      # - scan-backend:
      #     <<: *default-context
      #     requires: [build-backend]
      # - deploy-infrastructure:
      #    <<: *default-context
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # - configure-infrastructure:
      #     <<: *default-context
      #     requires: [deploy-infrastructure] 
      - run-migrations:
          <<: *default-context
          # requires: [configure-infrastructure]
     